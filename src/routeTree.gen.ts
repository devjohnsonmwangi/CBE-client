/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TeachersRouteImport } from './routes/teachers'
import { Route as StudentsRouteImport } from './routes/students'
import { Route as FinanceRouteImport } from './routes/finance'
import { Route as CoursesRouteImport } from './routes/courses'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardLmsRouteImport } from './routes/dashboard/lms'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const TeachersRoute = TeachersRouteImport.update({
  id: '/teachers',
  path: '/teachers',
  getParentRoute: () => rootRouteImport,
} as any)
const StudentsRoute = StudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => rootRouteImport,
} as any)
const FinanceRoute = FinanceRouteImport.update({
  id: '/finance',
  path: '/finance',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesRoute = CoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardLmsRoute = DashboardLmsRouteImport.update({
  id: '/dashboard/lms',
  path: '/dashboard/lms',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/courses': typeof CoursesRoute
  '/finance': typeof FinanceRoute
  '/students': typeof StudentsRoute
  '/teachers': typeof TeachersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/dashboard/lms': typeof DashboardLmsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/courses': typeof CoursesRoute
  '/finance': typeof FinanceRoute
  '/students': typeof StudentsRoute
  '/teachers': typeof TeachersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/dashboard/lms': typeof DashboardLmsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/courses': typeof CoursesRoute
  '/finance': typeof FinanceRoute
  '/students': typeof StudentsRoute
  '/teachers': typeof TeachersRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/dashboard/lms': typeof DashboardLmsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/courses'
    | '/finance'
    | '/students'
    | '/teachers'
    | '/auth/login'
    | '/auth/register'
    | '/dashboard/lms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/courses'
    | '/finance'
    | '/students'
    | '/teachers'
    | '/auth/login'
    | '/auth/register'
    | '/dashboard/lms'
  id:
    | '__root__'
    | '/'
    | '/courses'
    | '/finance'
    | '/students'
    | '/teachers'
    | '/auth/login'
    | '/auth/register'
    | '/dashboard/lms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoursesRoute: typeof CoursesRoute
  FinanceRoute: typeof FinanceRoute
  StudentsRoute: typeof StudentsRoute
  TeachersRoute: typeof TeachersRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  DashboardLmsRoute: typeof DashboardLmsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/teachers': {
      id: '/teachers'
      path: '/teachers'
      fullPath: '/teachers'
      preLoaderRoute: typeof TeachersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/students': {
      id: '/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof StudentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/finance': {
      id: '/finance'
      path: '/finance'
      fullPath: '/finance'
      preLoaderRoute: typeof FinanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses': {
      id: '/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/lms': {
      id: '/dashboard/lms'
      path: '/dashboard/lms'
      fullPath: '/dashboard/lms'
      preLoaderRoute: typeof DashboardLmsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoursesRoute: CoursesRoute,
  FinanceRoute: FinanceRoute,
  StudentsRoute: StudentsRoute,
  TeachersRoute: TeachersRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  DashboardLmsRoute: DashboardLmsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
